/* Sass variables*/

$yellow: #CCA240;
$black: #030303;
$gray: #646464;
$white: #fff;
$aqua: #6B8B91;
$red: #AB535B;
$green: #7A712F;
$blue: #536676;
$textFont: 'Open Sans Condensed',
sans-serif;
$linkFont: 'Amatic SC',
cursive;
// breakpoint variables
$xl: 1200px;
$lg: 1024px;
$md: 768px;
$sm: 640px;
$xs: 320px;

/*------------- Breakpoints mixin*/

$breakpoints: ( 'xsmall': ( min-width: $xs), 'small': ( min-width: $sm), 'medium': ( min-width: $md), 'large': ( min-width: $lg), 'xlarge': ( min-width: $xl));
@mixin breakpoint($name) {
    @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
            @content;
        }
    }
    @else {
        @warn "No breakpoint with this name `#{$name}`.";
    }
}

// breakpoint mixin for typography
@mixin bp($mq01: 0, $mq2: false, $maxmin: max-width) {
    @if $mq2==false {
        @media ($maxmin: $mq01) {
            @content;
        }
    }
    @else {
        @media (min-width: $mq01) and (max-width: $mq2) {
            @content;
        }
    }
}

// responsive font size mixin
@mixin font-size-map($font-size-map) {
    @each $breakpoint,
    $font-size in $font-size-map {
        @if $breakpoint==null {
            font-size: $font-size;
        }
        @else {
            @include bp($breakpoint) {
                font-size: $font-size;
            }
        }
    }
}

$h1-font-size: ($xl: 36px, $lg: 5vw, $md: 4.5vw, $sm: 16px, $xs: 32px);
$category-btn-font-size: (null: 24px, $xl: 24px, $lg: 2.7vw, $md: 3.2vw, $sm: 5vw, $xs: 18px);

/*------------- Heading mixins*/

@mixin heading {
    letter-spacing: 0.075em;
    line-height: 1.25em;
    font-weight: 400;
    margin: 0;
}

@mixin category-btn {
    @include heading;
    @include transition(all .3s ease-in-out);
    @include font-size-map($category-btn-font-size);
}

@mixin head-1 {
    @include heading;
    @include font-size-map($h1-font-size);
}

@mixin head-2 {
    @include heading;
}

@mixin head-3 {
    @include heading;
}

@mixin head-4 {
    @include heading;
}

// @mixin head-5 {
//     @include heading;
//     font-size: $mod_1*$mod_1*$mod_1*$mod_1 *0.2em;
//     @include fluid-type($min_width, $max_width, $mod_1*$mod_1*$mod_1 *$min_font, $mod_2*$mod_2*$mod_2 *$min_font);
// }
// @mixin head-6 {
//     @include heading;
//     font-size: $mod_1*$mod_1*$mod_1*$mod_1 *1em;
//     @include fluid-type($min_width, $max_width, $mod_1*$mod_1*$mod_1 *$min_font, $mod_2*$mod_2*$mod_2 *$min_font);
// }
@mixin calc($prop, $val) {
    @each $pre in -webkit-,
    -moz-,
    -o- {
        #{$prop}: $pre+calc(#{$val});
    }
    #{$prop}: calc(#{$val});
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

;

/*------------- Flexbox mixins*/

// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}

// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}


/*------------- Flexbox center mixin*/

@mixin flex-center() {
    @include flexbox;
    @include justify-content(center);
    @include align-items(center);
}

// Mixin for opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// Mixin for buttons with background transparent
@mixin transparent-backgound($color: #fff, $value:0.5) {
    $start: "rgb(";
    $end: ")";
    background: #{$start}red($color),
    green($color),
    blue($color)#{$end};
    background: rgba($color, $value);
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
    /* stops bg color from leaking outside the border: */
}

@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}